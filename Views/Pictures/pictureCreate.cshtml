@model Modells.Models.picture
@using globalLabels = Modells.Models.pictureGlobalLabels;

@{
    ViewBag.Title = "pictureCreate";
    Layout = "~/Views/Shared/_Layout.cshtml";

    // Class templates for the picture create :
    var formGroupCss = "form-group d-flex mx-auto justify-content-center";
    var labelCss = "control-label col-4 btn recButton text-light text-center text-wrap border border-light";
    var controlLabelCss = "control-label d-flex btn recButton border border-light col-1 justify-content-center";
    var controlLabelAttr = "data-container = body data-toggle = popover data-placement = right";
    var buttonToolAttr = "data-toggle = tooltip data-placement = bottom";
    var editCss = "form-control col-6 text-light border border-light was-validated currentInput";
    var btnCss = "d-flex btn recButton border border-light col-1 justify-content-center hovering";
    var previewCss = "col-sm-12 col-md-4 col-lg-4 border border-danger";

    // Global labels & titles :

    var backCol = globalLabels.BackToColl;
    var addPic = globalLabels.AddPicture;
    var resetFm = globalLabels.ResetForm;
    var previewImgTtl = globalLabels.PreviewImgMTitle;
    var previewImgAlt = globalLabels.PreviewImgATitle;
    var previewDefaultSrc = ViewBag.picturePreviewSrc ?? globalLabels.DefaultPictureUrl;

    // Action Links :
    var urlToColl = Url.Action("pictureCollection", "Pictures");

    @functions
    {
        // Display error messages for each property in a popover :
        string displayErrorMessage(string pictureItem)
        {
            var modelStateErrors = string.Join(" - ", ViewData.ModelState
                .Where(mdlState => mdlState.Key == pictureItem)
                .Where(errorsNb => errorsNb.Value.Errors.Count > 0)
                .SelectMany(errorItems => errorItems.Value.Errors)
                .Select(errorValue => errorValue.ErrorMessage)
                .ToList());

            return modelStateErrors;
        }
    }
}

<!--Load scripts file :-->
@Scripts.Render("~/Scripts/script.js");

<div class="container-fluid d-flex">
    <div class="row mx-auto align-items-center">

        <!--Display choosen picture to create :-->
        <div class="@previewCss">
            <p class="btn text-light d-flex justify-content-center">Aperçu de votre image</p>
            <img id="pictureChoice" src="@previewDefaultSrc" alt="@previewImgAlt" title="@previewImgTtl" class="card-img img-thumbnail mx-auto" />
            <p class="btn text-light d-flex justify-content-center m-2">---------------------</p>
        </div>

        <!--Display the form to add a picture :-->
        <div class="col-sm-12 col-md-8 col-lg-8">
            @using (Html.BeginForm("pictureCreate", "Pictures", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()

                <!--Diplay the picture creation form :-->
                <form class="form-horizontal form-control">

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <!--Input of picture standard url :-->
                        <div class="@formGroupCss">
                            @Html.LabelFor(model => model.pictureStandardUrl, new { @class = @labelCss })
                            <input type="file" class="form-control" name="newPictureToUpload" id="newPictureToUpload" onchange=integratePicture(event) />
                            @Html.EditorFor(model => model.pictureStandardUrl, new { htmlAttributes = new { @class = @editCss + " pictureStandardUrl", @onfocus = "clearCss(this)", @onblur = "isValid(this)", @autocomplete="off"} })
                            <label for="newPictureToUpload" class="@controlLabelCss" @controlLabelAttr data-content="@displayErrorMessage("newPictureToUpload")">
                                <i class="far fa-image"></i>
                            </label>
                        </div>

                        <!--Input of picture title :-->
                        <div class="@formGroupCss">
                            @Html.LabelFor(model => model.pictureTitle, new { @class = @labelCss })
                            @Html.EditorFor(model => model.pictureTitle, new { htmlAttributes = new { @class = @editCss, @onfocus = "clearCss(this)", @onblur = "isValid(this)", @autocomplete="off"} })
                            <label class="@controlLabelCss" @controlLabelAttr data-content="@displayErrorMessage("pictureTitle")">
                                <i class="fas fa-bookmark"></i>
                            </label>
                        </div>

                        <!--Input of picture alternative title :-->
                        <div class="@formGroupCss">
                            @Html.LabelFor(model => model.pictureAlternateTitle, new { @class = @labelCss })
                            @Html.EditorFor(model => model.pictureAlternateTitle, new { htmlAttributes = new { @class = @editCss, @onfocus = "clearCss(this)", @onblur = "isValid(this)", @autocomplete="off" } })
                            <label class="@controlLabelCss" @controlLabelAttr data-content="@displayErrorMessage("pictureAlternateTitle")">
                                <i class="far fa-bookmark"></i>
                            </label>
                        </div>

                        <!--Input of picture description :-->
                        <div class="@formGroupCss">
                            @Html.LabelFor(model => model.pictureDescription, new { @class = @labelCss })
                            @Html.EditorFor(model => model.pictureDescription, new {htmlAttributes = new { @class = @editCss, @onfocus = "clearCss(this)", @onblur = "isValid(this)" , @autocomplete="off"}})
                            <label class="@controlLabelCss" @controlLabelAttr data-content="@displayErrorMessage("pictureDescription")" onkeypress="">
                                <i class="fas fa-pen"></i>
                            </label>
                        </div>

                        <!--Input of picture category :-->
                        <div class="@formGroupCss">
                            @Html.LabelFor(model => model.categoryId, "Catégorie", new { @class = @labelCss })
                            @Html.DropDownList("categoryId", null, new { @class = @editCss })
                            <label class="@controlLabelCss">
                                <i class="fas fa-book-open"></i>
                            </label>
                        </div>

                        <!--Back - Clear Submit buttons :-->
                        <div class="@formGroupCss">

                            <!--Back button :-->
                            <button type="button" class="@btnCss offset-3" onclick="location.href='@urlToColl'" @buttonToolAttr title=@backCol>
                                <i class="fas fa-home"></i>
                            </button>

                            <!--Clear button :-->
                            <button value="Reset" class="@btnCss offset-2 resetForm" @buttonToolAttr title=@resetFm>
                                <i class="fas fa-eraser"></i>
                            </button>

                            <!--Submit button :-->
                            <button type="submit" value="pictureCreate" class="@btnCss offset-2" onclick="ValidateForm()" @buttonToolAttr title=@addPic>
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                </form>
            }
        </div>
    </div>
</div>