@model Modells.Models.picture
@{
    ViewBag.Title = "pictureCreate";
    Layout = "~/Views/Shared/_Layout.cshtml";

    // Class templates for the picture form :
    var formGroupCss = "form-group d-flex mx-auto justify-content-center";
    var labelCss = "control-label btn btn-dark col-4 text-center text-wrap";
    var controlLabelCss = "control-label btn btn-dark col-1 d-flex justify-content-center";
    var editCss = "form-control col-6 was-validated";
    var btnCss = "btn btn-dark col-1 d-flex justify-content-center";

}

@*Load scripts file*@
@Scripts.Render("~/Scripts/script.js");

<script>
    $(document).ready(function () {

        $('.resetForm').click(function (e) {

            e.preventDefault();
            $("form")[0].reset();
        });
    });

</script>

<div class="container-fluid d-flex">
    <div class="col-8 border border-warning">
        @using (Html.BeginForm("PictureCreate", "Pictures", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            // Diplay the picture creation form :
            <form class="form-horizontal form-control">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <fieldset class="border border-info">

                    @*Input of picture standard url :*@
                    <div class="@formGroupCss">
                        @Html.LabelFor(model => model.pictureStandardUrl, new { @class = @labelCss })
                        <input type="file" class="form-control" name="newPictureToUpload" id="newPictureToUpload" onchange=integratePicture(event) />
                        @Html.EditorFor(model => model.pictureStandardUrl, new { htmlAttributes = new { @class = @editCss + " pictureStandardUrl", @placeholder = "image.jpg" } })
                        <label for="newPictureToUpload" class="@controlLabelCss">
                            <i class="far fa-image"></i>
                        </label>
                        @Html.ValidationMessageFor(model => model.pictureStandardUrl, "", new { @class = "text-danger" })
                        @Html.ValidationMessage("newPictureToUpload")
                    </div>

                    @*Input of picture title :*@
                    <div class="@formGroupCss">
                        @Html.LabelFor(model => model.pictureTitle, new { @class = @labelCss })
                        @Html.EditorFor(model => model.pictureTitle, new { htmlAttributes = new { @class = @editCss, @placeholder = "titre" } })
                        <label class="@controlLabelCss">
                            <i class="fas fa-bookmark"></i>
                        </label>
                        @Html.ValidationMessageFor(model => model.pictureTitle, "", new { @class = "text-danger" })
                    </div>

                    @*Input of picture alternative title :*@
                    <div class="@formGroupCss">
                        @Html.LabelFor(model => model.pictureAlternateTitle, new { @class = @labelCss })
                        @Html.EditorFor(model => model.pictureAlternateTitle, new { htmlAttributes = new { @class = @editCss, @placeholder = "titre alternatif" } })
                        <label class="@controlLabelCss">
                            <i class="far fa-bookmark"></i>
                        </label>
                        @Html.ValidationMessageFor(model => model.pictureAlternateTitle, "", new { @class = "text-danger" })
                    </div>

                    @*Input of picture description :*@
                    <div class="@formGroupCss">
                        @Html.LabelFor(model => model.pictureDescription, new { @class = @labelCss })
                        @Html.TextAreaFor(model => model.pictureDescription, new { @class = @editCss, @placeholder = "descriptif", @style = "resize:none" })
                        <label class="@controlLabelCss">
                            <i class="fas fa-pen"></i>
                        </label>
                        @Html.ValidationMessageFor(model => model.pictureDescription, "", new { @class = "text-danger" })
                    </div>

                    @*Input of picture category :*@
                    <div class="@formGroupCss">
                        @Html.LabelFor(model => model.categoryId, "Catégorie", new { @class = @labelCss })
                        @Html.DropDownList("categoryId", null, new { @class = @editCss })
                        <label class="@controlLabelCss">
                            <i class="fas fa-book-open"></i>
                        </label>
                        @Html.ValidationMessageFor(model => model.categoryId, "", new { @class = "text-danger" })
                    </div>

                    @*Back - Clear Submit buttons :*@
                    <div class="@formGroupCss">
                        <button class="@btnCss offset-3">
                            <i class="fas fa-share"></i>
                            @*@Html.ActionLink("Retour", "Index2")*@
                        </button>
                        <button value="Reset" class="@btnCss offset-2 resetForm">
                            <i class="fas fa-eraser"></i>
                        </button>
                        <button type="submit" value="pictureCreate" class="@btnCss offset-2">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </fieldset>
            </form>
        }
    </div>

    @* Display choosen picture to create :*@
    <div class="col-4 border border-danger align-self-center d-flex">
        <img id="pictureChoice" src="" alt="" title="" class=" " />
    </div>
</div>