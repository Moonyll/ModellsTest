@model Modells.Models.picture
@using globalLabels = Modells.Models.pictureGlobalLabels;

@{
    ViewBag.Title = "pictureCreate";
    Layout = "~/Views/Shared/_Layout.cshtml";

    // Class templates for the picture create :
    var formGroupCss = "form-group d-flex mx-auto justify-content-center mb-0";
    var labelCss = "control-label col-4 btn recButton text-light text-center text-wrap border border-light";
    var controlLabelCss = "control-label d-flex btn recButton border border-light col-1 justify-content-center";
    //var controlLabelAttr = "data-container = body data-toggle = popover data-placement = right";
    var buttonToolAttr = "data-toggle = tooltip data-placement = bottom";
    var editCss = "form-control col-6 text-light border border-light was-validated currentInput";
    var btnCss = "d-flex btn recButton border border-light col-sm-6 col-md-1 col-lg-1 justify-content-center hovering";
    var previewCss = "col-sm-12 col-md-4 col-lg-4 border border-danger";

    // Global labels & titles :

    var addPic = globalLabels.AddPicture;
    var resetFm = globalLabels.ResetForm;
    var previewImgTtl = globalLabels.PreviewImgMTitle;
    var previewImgAlt = globalLabels.PreviewImgATitle;
    var previewDefaultSrc = (String.IsNullOrEmpty(ViewBag.picturePreviewSrc)) ?
                            globalLabels.DefaultPictureUrl :
                            ViewBag.picturePreviewSrc;

    // Action Links :
    var urlToColl = Url.Action("pictureCollection", "Pictures");

    @functions
    {
        // Display error messages for each property in a popover :
        string displayErrorMessage(string pictureItem)
        {
            var modelStateErrors = string.Join(" - ", ViewData.ModelState
                .Where(mdlState => mdlState.Key == pictureItem)
                .Where(errorsNb => errorsNb.Value.Errors.Count > 0)
                .SelectMany(errorItems => errorItems.Value.Errors)
                .Select(errorValue => errorValue.ErrorMessage)
                .ToList());

            return modelStateErrors;
        }
    }
}
@section Scripts
{
    <!--Add actions url for ajax calls :-->
    <script type="text/javascript">
    var urlPictureCreate = '@Url.Action("pictureCreate", "Pictures")';
    </script>

    <!--Load scripts file :-->
    @Scripts.Render("~/Scripts/script.js");
}

<div class="container-fluid d-flex">
    <div class="row mx-auto align-items-center">

        <!--Display choosen picture to create :-->
        <div class="@previewCss">
            <p class="btn text-light d-flex justify-content-center">Aperçu de votre image</p>
            <img id="pictureChoice" src="@previewDefaultSrc" alt="@previewImgAlt" title="@previewImgTtl" class="card-img img-thumbnail mx-auto" />
            <p class="btn text-light d-flex justify-content-center m-2">---------------------</p>
        </div>

        <!--Display the form to add a picture :-->
        <div class="col-sm-12 col-md-8 col-lg-8">
            @using (Html.BeginForm("pictureCreate", "Pictures", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()

                <!--Diplay the picture creation form :-->
            <form class="form-horizontal form-control m-2 mt-3">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <!--Input of picture standard url :-->
                <div class="@formGroupCss mt-3">
                    @Html.LabelFor(model => model.pictureStandardUrl, new { @class = @labelCss })
                    <input type="file" class="form-control" name="newPictureToUpload" id="newPictureToUpload" onchange=integratePicture(event) />
                    @Html.EditorFor(model => model.pictureStandardUrl, new { htmlAttributes = new { @class = @editCss + " pictureStandardUrl", @onfocus = "clearCss(this)", @onblur = "isValid(this)", @autocomplete = "off" } })
                    <label for="newPictureToUpload" class="@controlLabelCss hovering">
                        <i class="far fa-image"></i>
                    </label>
                </div>
                <div class="control-label col-11 btn recButton d-flex mx-auto text-center mb-3 text-wrap border border-light errorMessage">
                !   @displayErrorMessage("newPictureToUpload")
                </div>

                <!--Input of picture title :-->
                <div class="@formGroupCss">
                    @Html.LabelFor(model => model.pictureTitle, new { @class = @labelCss })
                    @Html.EditorFor(model => model.pictureTitle, new { htmlAttributes = new { @class = @editCss, @onfocus = "clearCss(this)", @onblur = "isValid(this)", @autocomplete = "off" } })
                    <label class="@controlLabelCss text-light">
                        <i class="fas fa-bookmark"></i>
                    </label>
                </div>
                <div class="control-label col-11 btn recButton d-flex mx-auto mb text-center mb-3 text-wrap border border-light errorMessage">
                !   @displayErrorMessage("pictureTitle")
                </div>

                <!--Input of picture alternative title :-->
                <div class="@formGroupCss">
                    @Html.LabelFor(model => model.pictureAlternateTitle, new { @class = @labelCss })
                    @Html.EditorFor(model => model.pictureAlternateTitle, new { htmlAttributes = new { @class = @editCss, @onfocus = "clearCss(this)", @onblur = "isValid(this)", @autocomplete = "off" } })
                    <label class="@controlLabelCss">
                        <i class="far fa-bookmark"></i>
                    </label>
                </div>
                <div class="control-label col-11 btn recButton d-flex mx-auto text-center mb-3 text-wrap border border-light errorMessage">
                 !   @displayErrorMessage("pictureAlternateTitle")
                </div>
                <!--Input of picture description :-->
                <div class="@formGroupCss">
                    @Html.LabelFor(model => model.pictureDescription, new { @class = @labelCss })
                    @Html.EditorFor(model => model.pictureDescription, new { htmlAttributes = new { @class = @editCss, @onfocus = "clearCss(this)", @onblur = "isValid(this)", @autocomplete = "off" } })
                    <label class="@controlLabelCss">
                        <i class="fas fa-pen"></i>
                    </label>
                </div>
                <div class="control-label col-11 btn recButton d-flex mx-auto text-center mb-3 text-wrap border border-light errorMessage">
                !   @displayErrorMessage("pictureDescription")
                </div>

                <!--Input of picture category :-->
                <div class="@formGroupCss">
                    @Html.LabelFor(model => model.categoryId, "Catégorie", new { @class = @labelCss })
                    @Html.DropDownList("categoryId", null, new { @class = @editCss })
                    <label class="@controlLabelCss">
                        <i class="fas fa-book-open"></i>
                    </label>
                </div>

                <!--Back - Clear Submit buttons :-->
                <div class="d-flex justify-content-center col-sm-12 my-3">

                    <!--Clear button :-->
                    <button class="@btnCss offset-md-3 offset-lg-3 resetForm formButton" value="Reset" @buttonToolAttr title=@resetFm>
                        <i class="fas fa-eraser"></i>
                    </button>

                    <!--Submit button :-->
                    <button class="@btnCss offset-md-2 offset-lg-2 formButton" type="submit" value="pictureCreate" id="submitPicture" @buttonToolAttr title=@addPic>
                        <i class="fas fa-plus"></i>
                    </button>
                </div>
            </form>
            }
        </div>
    </div>
</div>